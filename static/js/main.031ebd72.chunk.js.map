{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortField","setSortField","reversed","setReversed","visuableGoods","goods","isReversed","preparedGoods","sort","good1","good2","ALPHABETICALLY","localeCompare","LENGTH","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,gCAAAA,E,gBAAAA,E,SAAAA,M,KAML,IA6BaE,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAEMC,EAjCiB,SACvBC,EACAL,EACAM,GAEA,IAAIC,EAAa,YAAOF,GAqBxB,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQV,GACN,KAAKL,EAASgB,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXR,IACFC,EAAgBA,EAAcQ,WAGzBR,EAOeS,CACpBpB,EACAI,EACAE,GAGF,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYnB,IAAcL,EAASgB,iBAEvCS,QAAS,WACPnB,EAAaN,EAASgB,iBAP1B,iCAaA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYnB,IAAcL,EAASkB,SAEvCO,QAAS,WACPnB,EAAaN,EAASkB,SAP1B,4BAaA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAyB,IAAbjB,IAEhBkB,QAAS,WACPjB,GAAaD,IAPjB,sBAagB,KAAdF,GAAoBE,IAElB,wBACEgB,KAAK,SACLD,UAAWE,IAAW,6BACtBC,QAAS,WACPjB,GAAY,GACZF,EAAaN,EAASI,OAL1B,sBAaN,6BACGK,EAAciB,KAAI,SAAAC,GAAI,OACrB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.031ebd72.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABETICALLY = 'alphabetically',\n  LENGTH = 'length',\n  NONE = '',\n}\n\nconst getPreparedGoods = (\n  goods: string[],\n  sortField: string,\n  isReversed: boolean,\n) => {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ALPHABETICALLY:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.NONE);\n  const [reversed, setReversed] = useState(false);\n\n  const visuableGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    reversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': sortField !== SortType.ALPHABETICALLY },\n          )}\n          onClick={() => {\n            setSortField(SortType.ALPHABETICALLY);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': sortField !== SortType.LENGTH },\n          )}\n          onClick={() => {\n            setSortField(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': reversed !== true },\n          )}\n          onClick={() => {\n            setReversed(!reversed);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== '' || reversed)\n          && (\n            <button\n              type=\"button\"\n              className={classNames('button is-danger is-light')}\n              onClick={() => {\n                setReversed(false);\n                setSortField(SortType.NONE);\n              }}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {visuableGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}